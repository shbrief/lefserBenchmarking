---
title: "Compare biomarkers from LEfSe, lefser, and MM: gingival data"
author: "Sehyun Oh"
date: "`r format(Sys.time(), '%B %d, %Y')`"
vignette: >
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteIndexEntry{Gingival dataset}
  %\VignetteEncoding{UTF-8}
output:
  BiocStyle::html_document:
    number_sections: yes
    toc: yes
    toc_depth: 4
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(comment = "#>", 
                      collapse = FALSE, 
                      message = FALSE, 
                      warning = FALSE)
```

```{r echo=FALSE}
suppressPackageStartupMessages({
    library(dplyr)
    library(lefser)
    library(microbiomeMarker)
    library(lefserBenchmarking)
    library(ggplot2)
})
```


# Setup
## Accessory function
```{r adding_taxa_name_function}
source("~/Projects/lefserBenchmarking/R/addTaxon.R")
```

## Prior info
```{r}
prior_info <- readr::read_csv("~/Projects/lefserBenchmarking/inst/extdata/prior_info.csv") # taxon name
```
## Features identified
Scripts for the biomarker discovery by each method (if not described in this 
vignette) are available in the same directory with the file name of 
`reproducibility_gingival_{package_name}.R` (for lefser and microbiomeMarker) 
and `vignettes/LEfSe_Docker_Run.qmd` (for LEfSe).

# Results
## LEfSe
### Strict thresholds
```{r}
col_names <- c('feature', 'log_hi_class_avg', 'class', 'lefse_docker_LDA', 'pval')
lefse_res <- readr::read_tsv(
    "data/LEfSe_Bootstrap_Iterations/gingival_a0.01_w0.01_lda3_bp30.res",
    col_names = FALSE, show_col_types = FALSE) %>% 
    magrittr::set_colnames(col_names)
```

```{r}
lefse_docker <- lefse_res %>% 
    filter(!is.na(lefse_docker_LDA)) %>% 
    mutate(lefse_galaxy_LDA = ifelse(class == "control", -lefse_docker_LDA, lefse_docker_LDA),
           app_name = 'lefse_docker')

lefse_docker$feature <- lapply(lefse_docker$feature, function(x) {
    strsplit(x, "\\.") %>% unlist %>% tail(., 1)}) %>% unlist

lefse_docker <- lefse_docker %>% dplyr::rename(features = feature)
head(lefse_docker)
```

```{r}
## Annotation summary per class
lefse_tb <- addTaxon(lefse_docker, prior_info) # add annotation
lefse_tb %>%
    group_by(class, taxon_annotation) %>%
    summarise(n = n())
```

#### Barplot
```{r}
## Format LEfSe results to plot using `lefserPlot` function
lefse_docker_for_plot <- lefse_tb %>%
    dplyr::mutate(direction = ifelse(class == "subgingival_plaque", 1, -1)) %>%
    dplyr::mutate(scores = direction * lefse_docker_LDA) %>%
    dplyr::select(most_specific_taxa, scores, taxon_annotation) %>%
    dplyr::rename(features = most_specific_taxa)

attributes(lefse_docker_for_plot)$groups <- c("supragingival_plaque", "subgingival_plaque")
lefserPlot(lefse_docker_for_plot, color = "l")
ggsave("Figures/SupFig3B_gingival_LEfSe.png")
```


### Permissive thresholds
```{r}
col_names <- c('feature', 'log_hi_class_avg', 'class', 'lefse_docker_LDA', 'pval')
lefse_res2 <- readr::read_tsv(
    "data/gingival_a0.05_w0.05_lda2_LEfSe.res",
    col_names = FALSE, show_col_types = FALSE) %>% 
    magrittr::set_colnames(col_names)

lefse_docker2 <- lefse_res2 %>% 
    filter(!is.na(lefse_docker_LDA)) %>% 
    mutate(lefse_galaxy_LDA = ifelse(class == "control", -lefse_docker_LDA, lefse_docker_LDA),
           app_name = 'lefse_docker')

lefse_docker2$feature <- lapply(lefse_docker2$feature, function(x) {
    strsplit(x, "\\.") %>% unlist %>% tail(., 1)}) %>% unlist

lefse_docker2 <- lefse_docker2 %>% dplyr::rename(features = feature)

## Annotation summary per class
lefse_tb2 <- addTaxon(lefse_docker2, prior_info) # add annotation
lefse_tb2 %>%
    group_by(class, taxon_annotation) %>%
    summarise(n = n())
```



## lefser
### Strict threshold
```{r}
lefser_res <- readRDS("data/gingival_a0.01_w0.01_lda3_lefser.rds")

lefser_tb <- addTaxon(lefser_res, prior_info)
lefser_inter <- lefser_tb %>%
    dplyr::rename(otu = features, features = most_specific_taxa)

lefserPlot(lefser_inter)
ggsave("Figures/SupFig3A_gingival_lefser.png")
```


```{r feature_in_histogram}
plot_group <- lefserPlotFeat(lefser_res, lefser_res$features[[1]])
plot_group
```

```{r cladogram, eval=FALSE}
##### Prepare input data -------------------------------------
tse_subset <- readRDS("data/gingival_dataset_for_benchmarking.rds")
rankNames <- colnames(rowData(tse_subset))
rankNames <- stringr::str_replace(rankNames, "superkingdom", "kingdom")
colnames(rowData(tse_subset)) <- rankNames
colData(tse_subset)$body_subsite <- factor(
    colData(tse_subset)$body_subsite,
    levels = c("supragingival_plaque", "subgingival_plaque")
)

lefserInput <- relativeAb(tse_subset)

## Parameters
kwth <- 0.01
wth <- 0.01
ldath <- 3

## Only with the terminal nodes
terminal_nodes <- get_terminal_nodes(rownames(tse_subset))
lefserInput2 <- tse_subset[terminal_nodes, ] %>% relativeAb(.)

## All ranks for cladogram
source("~/Projects/lefserBenchmarking/R/lefserAllRanks2.R")
set.seed(1982)
resAll <- lefserAllRanks2(
    lefserInput2,
    kruskal.threshold = kwth,
    wilcox.threshold = wth,
    lda.threshold = ldath,
    groupCol = "body_subsite",
    blockCol = NULL)

lefserPlotClad(resAll, showTipLabels = TRUE)
```

```{r}
lefser_summary <- lefser_inter %>%
    mutate(class = ifelse(scores < 0, "supragingival", "subgingival")) %>%
    group_by(class, taxon_annotation) %>%
    summarise(n = n())
lefser_summary
```

### Permissive threshold
```{r}
lefser_res2 <- readRDS("data/gingival_a0.05_w0.05_lda2_lefser.rds")

lefser_tb2 <- addTaxon(lefser_res2, prior_info)

lefser_summary2 <- lefser_tb2 %>%
    mutate(class = ifelse(scores < 0, "supragingival", "subgingival")) %>%
    group_by(class, taxon_annotation) %>%
    summarise(n = n())
lefser_summary2
```
   


## microbiomeMarker 
### Strict threshold
```{r}
mm_res <- readRDS("data/gingival_a0.01_w0.01_lda3_mm.rds")

# ## Convert OTU to taxa name in MM output
# otu <- marker_table(mm_res)$feature
# otu_updated <- plyr::mapvalues(
#     x = otu,
#     from = prior_info$taxon_name,
#     to = prior_info$most_specific_taxa,
#     warn_missing = TRUE
# )
# marker_table(mm_res)$feature <- otu_updated

plot_ef_bar(mm_res)
ggsave("Figures/SupFig3C_gingival_microbiomeMarker.png")
```

```{r}
## Format the output
mm_inter <- marker_table(mm_res)
class(mm_inter) <- NULL
mm_tb <- as_tibble(mm_inter)[names(mm_inter)]
mm_tb <- mm_tb %>%
    dplyr::rename(features = feature) %>%
    addTaxon(prior_info)

## Summary
mm_summary <- mm_tb %>%
    group_by(enrich_group, taxon_annotation) %>%
    summarise(n = n())
mm_summary
```

### Permissive threshold
```{r}
mm_res2 <- readRDS("data/gingival_a0.05_w0.05_lda2_mm.rds")

## Format the output
mm_inter2 <- marker_table(mm_res2)
class(mm_inter2) <- NULL
mm_tb2 <- as_tibble(mm_inter2)[names(mm_inter2)]
mm_tb2 <- mm_tb2 %>%
    dplyr::rename(features = feature) %>%
    addTaxon(prior_info)

## Summary
mm_summary2 <- mm_tb2 %>%
    group_by(enrich_group, taxon_annotation) %>%
    summarise(n = n())
mm_summary2
```

# Comparison
## Strict threshold
```{r}
## Summary table of detected taxa under the strict thresholds
lefse_annot <- data.frame(annotation = lefse_tb$taxon_annotation, tool = "LEfSe")
lefser_annot <- data.frame(annotation = lefser_tb$taxon_annotation, tool = "lefser")
mm_annot <- data.frame(annotation = mm_tb$taxon_annotation, tool = "MM")

all_annot <- rbind(lefse_annot, lefser_annot, mm_annot)
table(all_annot$tool, all_annot$annotation, useNA = "ifany") 
```

## Permissive threshold
```{r}
## Summary table of detected taxa under the strict thresholds
lefse_annot2 <- data.frame(annotation = lefse_tb2$taxon_annotation, tool = "LEfSe")
lefser_annot2 <- data.frame(annotation = lefser_tb2$taxon_annotation, tool = "lefser")
mm_annot2 <- data.frame(annotation = mm_tb2$taxon_annotation, tool = "MM")

all_annot2 <- rbind(lefse_annot2, lefser_annot2, mm_annot2)
table(all_annot2$tool, all_annot2$annotation, useNA = "ifany") 
```




# Venn diagrams
## Strict threshold
```{r}
lefse_taxa <- unique(lefse_tb$most_specific_taxa)
lefser_taxa <- unique(lefser_tb$most_specific_taxa)
mm_taxa <- unique(mm_tb$most_specific_taxa)

fit <- threeVennDiagram(lefse_taxa, lefser_taxa, mm_taxa)
base::plot(fit, quantities = TRUE) # Save as `Figures/SupFig3D_gingival_venn_diagram.png`
```

## Permissive threshold
```{r}
lefse_taxa2 <- unique(lefse_tb2$most_specific_taxa)
lefser_taxa2 <- unique(lefser_tb2$most_specific_taxa)
mm_taxa2 <- unique(mm_tb2$most_specific_taxa)

fit2 <- threeVennDiagram(lefse_taxa2, lefser_taxa2, mm_taxa2)
base::plot(fit2, quantities = TRUE)

fit3 <- threeVennDiagram(unique(lefse_tb2$features), 
                         unique(lefser_tb2$features),
                         unique(mm_tb2$features))
base::plot(fit3, quantities = TRUE)
```