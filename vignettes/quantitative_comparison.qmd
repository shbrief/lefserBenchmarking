---
title: "Quantitative Comparison"
author: "Sehyun Oh"
date: "`r format(Sys.time(), '%B %d, %Y')`"
vignette: >
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteIndexEntry{Precision-Recall Plot}
  %\VignetteEncoding{UTF-8}
output:
  BiocStyle::html_document:
    number_sections: yes
    toc: yes
    toc_depth: 4
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(comment = "#>", 
                      collapse = TRUE, 
                      message = FALSE, 
                      warning = FALSE)
```

# Load data
```{r}
source("~/Projects/lefserBenchmarking/vignettes/quantitative_comparison_data.R")
```

```{r}
set1 <- lefser_output$feature # results from lefser
set2 <- lefse_docker$feature # results from LEfSe
set3 <- mm_output$feature # results from microbiomeMarker

allFeatures <- unique(c(set1, set2, set3))
dat <- as.data.frame(matrix(0, nrow = length(allFeatures), ncol = 4))
colnames(dat) <- c("feature", "LEfSe", "lefser", "MM")
dat$feature <- allFeatures

for (i in seq_along(allFeatures)) {
    feature <- allFeatures[i]
    ifelse(feature %in% set2, dat$LEfSe[i] <- TRUE, dat$LEfSe[i] <- FALSE)
    ifelse(feature %in% set1, dat$lefser[i] <- TRUE, dat$lefser[i] <- FALSE)
    ifelse(feature %in% set3, dat$MM[i] <- TRUE, dat$MM[i] <- FALSE)
}

# Combine LDA scores
lefser_dat <- lefser_output[c("feature", "lefser_LDA")] %>%
    bind_rows(data.frame(feature = setdiff(allFeatures, .$feature),
                         lefser_LDA = 0))
LEfSe_dat <- lefse_docker[c("feature", "lefse_docker_LDA")] %>%
    bind_rows(data.frame(feature = setdiff(allFeatures, .$feature),
                         lefse_docker_LDA = 0))

dat_combined <- left_join(dat, lefser_dat[c("feature", "lefser_LDA")], by = "feature") %>%
    relocate(lefser_LDA, .after = lefser) %>%
    left_join(LEfSe_dat[c("feature", "lefse_docker_LDA")], by = "feature") %>%
    relocate(lefse_docker_LDA, .after = LEfSe) %>%
    mutate(lefser_diff = abs(abs(lefse_docker_LDA) - abs(lefser_LDA)))

head(dat_combined)
```


## Curve with LDA scores
```{r}
# set.seed(123)  # for reproducibility
# microbes <- c("Bacteroides", "Prevotella", "Faecalibacterium", "Bifidobacterium", 
#               "Escherichia", "Lactobacillus", "Clostridium", "Ruminococcus", 
#               "Akkermansia", "Streptococcus")
# actual_biomarkers <- c(TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE)
# likelihood_scores <- c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05)

microbes <- dat_combined$feature
actual_biomarkers <- dat_combined$LEfSe
likelihood_scores <- dat_combined$lefser_diff

# Create a data frame
biomarker_data <- data.frame(
  Microbe = microbes,
  Actual = actual_biomarkers,
  Likelihood = likelihood_scores
)
```

```{r}
# Load required libraries
library(ggplot2)
library(pROC)

# Function to calculate precision and recall
calculate_pr <- function(actual, predicted, threshold) {
  predicted_positive <- predicted >= threshold
  true_positive <- sum(actual & predicted_positive)
  false_positive <- sum(!actual & predicted_positive)
  false_negative <- sum(actual & !predicted_positive)
  
  precision <- true_positive / (true_positive + false_positive)
  recall <- true_positive / (true_positive + false_negative)
  
  return(c(precision = precision, recall = recall))
}

# Calculate precision and recall for different thresholds
thresholds <- seq(0, 1, by = 0.01)
pr_results <- t(sapply(thresholds, function(thresh) {
  calculate_pr(biomarker_data$Actual, biomarker_data$Likelihood, thresh)
}))

# Create a data frame for plotting
pr_df <- data.frame(
  Threshold = thresholds,
  Precision = pr_results[, "precision"],
  Recall = pr_results[, "recall"]
)

# Create the precision-recall curve
ggplot(pr_df, aes(x = Recall, y = Precision)) +
  geom_line() +
  geom_point(data = pr_df[seq(1, nrow(pr_df), 10), ], aes(color = Threshold), size = 3) +
  scale_color_gradient(low = "red", high = "blue") +
  labs(title = "Precision-Recall Curve for Biomarker Detection",
       x = "Recall", 
       y = "Precision",
       color = "Threshold") +
  theme_minimal() +
  coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))

# Save the plot
ggsave("precision_recall_curve.png", width = 10, height = 8, dpi = 300)

# Calculate AUC-PR
auc_pr <- auc(pr_df$Recall, pr_df$Precision)

# Find the threshold that maximizes F1 score
f1_scores <- 2 * (pr_df$Precision * pr_df$Recall) / (pr_df$Precision + pr_df$Recall)
best_threshold_index <- which.max(f1_scores)
best_threshold <- pr_df$Threshold[best_threshold_index]

# Print summary statistics
cat("AUC-PR:", auc_pr, "\n")
cat("Best threshold (max F1 score):", best_threshold, "\n")
cat("Precision at best threshold:", pr_df$Precision[best_threshold_index], "\n")
cat("Recall at best threshold:", pr_df$Recall[best_threshold_index], "\n")

# Print biomarkers above the best threshold
selected_biomarkers <- biomarker_data$Microbe[biomarker_data$Likelihood >= best_threshold]
cat("Selected biomarkers at best threshold:", paste(selected_biomarkers, collapse = ", "), "\n")

# Print comparison of actual vs. predicted biomarkers
cat("\nComparison of actual vs. predicted biomarkers:\n")
print(data.frame(
  Microbe = biomarker_data$Microbe,
  Actual = ifelse(biomarker_data$Actual, "Biomarker", "Not Biomarker"),
  Predicted = ifelse(biomarker_data$Likelihood >= best_threshold, "Biomarker", "Not Biomarker"),
  Likelihood = biomarker_data$Likelihood
))
```


## Barplot
```{r}
# Load required libraries
library(ggplot2)

# Function to calculate precision and recall for biomarkers
calculate_pr_biomarkers <- function(actual, predicted) {
  true_positives <- sum(predicted %in% actual)
  false_positives <- sum(!(predicted %in% actual))
  false_negatives <- sum(!(actual %in% predicted))
  
  precision <- true_positives / (true_positives + false_positives)
  recall <- true_positives / (true_positives + false_negatives)
  
  f1_score <- 2 * (precision * recall) / (precision + recall)
  
  list(precision = precision, recall = recall, f1_score = f1_score)
}
```

```{r}
actual_biomarkers <- set2
detected_biomarkers <- set1
title <- "LEfSe vs. MM"
```

```{r}
# Calculate precision and recall
results <- calculate_pr_biomarkers(actual_biomarkers, detected_biomarkers)

# Print results
cat("Precision:", results$precision, "\n")
cat("Recall:", results$recall, "\n")
cat("F1 Score:", results$f1_score, "\n")

# Create a data frame for plotting
plot_data <- data.frame(
  Metric = c("Precision", "Recall", "F1 Score"),
  Value = c(results$precision, results$recall, results$f1_score)
)
```

```{r fig.width=2, fig.height=2.5}
# Create the plot
ggplot(plot_data, aes(x = Metric, y = Value, fill = Metric)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = round(Value, 2)), vjust = -0.3, size = 2.2) +
  ylim(0, 1) +
  labs(title = title,
       y = "Score",
       x = "") +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(size = 8, face = "bold"),
        axis.title.y = element_text(size = 8),
        axis.text = element_text(size = 6),
        axis.text.x = element_text(angle = 45))
```

```{r}
# Save the plot
ggsave("microbiome_biomarker_metrics.png", width = 8, height = 6, dpi = 300)

# Print biomarker comparison
cat("\nTrue Positives:", paste(intersect(actual_biomarkers, detected_biomarkers), collapse = ", "), "\n")
cat("False Positives:", paste(setdiff(detected_biomarkers, actual_biomarkers), collapse = ", "), "\n")
cat("False Negatives:", paste(setdiff(actual_biomarkers, detected_biomarkers), collapse = ", "), "\n")
```



```{r}
# Load required libraries
library(ggplot2)
library(UpSetR)
library(VennDiagram)

# Function to calculate precision and recall for biomarkers
calculate_pr_biomarkers <- function(actual, predicted) {
  true_positives <- sum(predicted %in% actual)
  false_positives <- sum(!(predicted %in% actual))
  false_negatives <- sum(!(actual %in% predicted))
  
  precision <- true_positives / (true_positives + false_positives)
  recall <- true_positives / (true_positives + false_negatives)
  
  list(precision = precision, recall = recall)
}

# Calculate precision and recall
results <- calculate_pr_biomarkers(actual_biomarkers, detected_biomarkers)

# 1. Single Point Visualization
ggplot(data.frame(x = results$recall, y = results$precision), aes(x, y)) +
  geom_point(size = 5, color = "blue") +
  geom_text(aes(label = paste("Precision:", round(results$precision, 2), "\nRecall:", round(results$recall, 2))),
            vjust = -1.5) +
  xlim(0, 1) + ylim(0, 1) +
  labs(title = "Precision-Recall Point for Biomarker Detection",
       x = "Recall", y = "Precision") +
  theme_minimal()
ggsave("precision_recall_point.png", width = 8, height = 6, dpi = 300)

# 2. Upset Plot
list_input <- list(Actual = actual_biomarkers, Detected = detected_biomarkers)
upset(fromList(list_input), order.by = "freq")
ggsave("upset_plot.png", width = 8, height = 6, dpi = 300)

# # 3. Venn Diagram
# venn.diagram(
#   x = list(Actual = actual_biomarkers, Detected = detected_biomarkers),
#   filename = "venn_diagram.png",
#   output = TRUE,
#   imagetype = "png",
#   height = 3000,
#   width = 3000,
#   resolution = 300,
#   compression = "lzw",
#   lwd = 2,
#   col = c("#440154ff", "#21908dff"),
#   fill = c(alpha("#440154ff", 0.3), alpha("#21908dff", 0.3)),
#   cex = 0.6,
#   fontface = "bold",
#   cat.cex = 0.6,
#   cat.default.pos = "outer",
#   cat.pos = c(-27, 27),
#   cat.dist = c(0.055, 0.055),
#   cat.fontface = "bold",
#   cat.col = c("#440154ff", "#21908dff")
# )
```

## Multiple runs (?)
Because the LEfSe algorithm includes a random step, we can produces multiple,
slightly different lists of biomarkers from LEfSe, which allows us to assess 
the consistency and robustness of the biomarker detection method.

```{r eval=FALSE}
# Load required libraries
library(ggplot2)
library(reshape2)
library(UpSetR)

# Function to calculate precision and recall for biomarkers
calculate_pr_biomarkers <- function(actual, predicted) {
  true_positives <- sum(predicted %in% actual)
  false_positives <- sum(!(predicted %in% actual))
  false_negatives <- sum(!(actual %in% predicted))
  
  precision <- true_positives / (true_positives + false_positives)
  recall <- true_positives / (true_positives + false_negatives)
  
  list(precision = precision, recall = recall)
}

# Example data (replace with your actual data)
actual_biomarkers <- c("Bacteroides", "Prevotella", "Faecalibacterium", "Bifidobacterium")
# Simulating 10 runs of slightly different detected biomarkers
detected_biomarkers_list <- list(
  c("Bacteroides", "Prevotella", "Escherichia", "Lactobacillus", "Bifidobacterium"),
  c("Bacteroides", "Prevotella", "Faecalibacterium", "Lactobacillus"),
  c("Bacteroides", "Escherichia", "Faecalibacterium", "Bifidobacterium"),
  c("Prevotella", "Faecalibacterium", "Lactobacillus", "Bifidobacterium"),
  c("Bacteroides", "Prevotella", "Escherichia", "Bifidobacterium"),
  c("Bacteroides", "Prevotella", "Faecalibacterium", "Escherichia"),
  c("Bacteroides", "Prevotella", "Lactobacillus", "Bifidobacterium"),
  c("Prevotella", "Escherichia", "Faecalibacterium", "Bifidobacterium"),
  c("Bacteroides", "Escherichia", "Lactobacillus", "Bifidobacterium"),
  c("Bacteroides", "Prevotella", "Faecalibacterium", "Lactobacillus")
)

# Calculate precision and recall for each run
results <- lapply(detected_biomarkers_list, function(detected) {
  calculate_pr_biomarkers(actual_biomarkers, detected)
})

# Combine results into a data frame
results_df <- do.call(rbind, lapply(seq_along(results), function(i) {
  data.frame(
    Run = i,
    Precision = results[[i]]$precision,
    Recall = results[[i]]$recall
  )
}))

# 1. Scatter plot of precision and recall for each run
ggplot(results_df, aes(x = Recall, y = Precision)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_text(aes(label = Run), vjust = -1, hjust = 0.5) +
  xlim(0, 1) + ylim(0, 1) +
  labs(title = "Precision-Recall Points for Multiple Biomarker Detection Runs",
       x = "Recall", y = "Precision") +
  theme_minimal()
ggsave("precision_recall_scatter.png", width = 8, height = 6, dpi = 300)

# 2. Box plot of precision and recall
results_melted <- melt(results_df, id.vars = "Run", 
                       variable.name = "Metric", value.name = "Value")
ggplot(results_melted, aes(x = Metric, y = Value)) +
  geom_boxplot() +
  geom_jitter(width = 0.2, alpha = 0.5) +
  ylim(0, 1) +
  labs(title = "Distribution of Precision and Recall Across Runs",
       y = "Value") +
  theme_minimal()
ggsave("precision_recall_boxplot.png", width = 8, height = 6, dpi = 300)

# 3. Frequency of biomarker detection
biomarker_freq <- table(unlist(detected_biomarkers_list))
biomarker_freq_df <- data.frame(
  Biomarker = names(biomarker_freq),
  Frequency = as.vector(biomarker_freq),
  Actual = names(biomarker_freq) %in% actual_biomarkers
)
biomarker_freq_df <- biomarker_freq_df[order(-biomarker_freq_df$Frequency), ]

ggplot(biomarker_freq_df, aes(x = reorder(Biomarker, -Frequency), y = Frequency, fill = Actual)) +
  geom_bar(stat = "identity") +
  labs(title = "Frequency of Biomarker Detection Across Runs",
       x = "Biomarker", y = "Number of Runs Detected") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("biomarker_frequency.png", width = 10, height = 6, dpi = 300)

# 4. UpSet plot to show intersections
list_input <- c(list(Actual = actual_biomarkers), 
                setNames(detected_biomarkers_list, paste0("Run_", seq_along(detected_biomarkers_list))))
upset(fromList(list_input), nsets = length(list_input), order.by = "freq")
ggsave("upset_plot.png", width = 12, height = 8, dpi = 300)

# Print summary statistics
cat("Mean Precision:", mean(results_df$Precision), "\n")
cat("Mean Recall:", mean(results_df$Recall), "\n")
cat("Actual Biomarkers:", paste(actual_biomarkers, collapse = ", "), "\n")
cat("Biomarkers detected in all runs:", 
    paste(names(biomarker_freq)[biomarker_freq == length(detected_biomarkers_list)], collapse = ", "), "\n")
cat("Biomarkers detected in at least 50% of runs:", 
    paste(names(biomarker_freq)[biomarker_freq >= 0.5 * length(detected_biomarkers_list)], collapse = ", "), "\n")
```

