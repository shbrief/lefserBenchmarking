---
title: "Run LEfSe from Docker container"
author: "Sehyun Oh"
date: "`r format(Sys.time(), '%B %d, %Y')`"
vignette: >
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteIndexEntry{Run LEfSe from Docker container}
  %\VignetteEncoding{UTF-8}
output:
  BiocStyle::html_document:
    number_sections: yes
    toc: yes
    toc_depth: 4
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(comment = "#>", 
                      collapse = TRUE, 
                      message = FALSE, 
                      warning = FALSE,
                      eval = FALSE)
```

# Setup
## Docker
```{bash}
## Start the LEfSe docker
docker run -it biobakery/lefse bash
```

## gsutil
Install `gsutil` following this: https://cloud.google.com/storage/docs/gsutil_install#linux 



# Gingival dataset
## Data
Copy the input data to Google Cloud bucket
```{bash}
mkdir gingival
cd gingival

curl https://raw.githubusercontent.com/shbrief/lefserBenchmarking/main/vignettes/gingival/data/gingivalplaque_ra.txt > gingival.txt
/home/linuxbrew/.linuxbrew/bin/format_input.py gingival.txt gingival.in -c 1 -s -1 -u 2 -o 1000000
```

## Single run
- With the default boostrap iterations (n = 30)
- Using Kruskal Wallis test threshold = 0.05 and LDA cutoff = 2

```{bash single_run}
ath=0.05
wth=0.05
ldath=2

/home/linuxbrew/.linuxbrew/bin/run_lefse.py -a "$ath" -w "$wth" -l "$ldath" gingival.in "gingival_a${ath}_w${wth}_lda${ldath}_LEfSe.res"

## Copy the results to Google Cloud bucket
/home/linuxbrew/google-cloud-sdk/bin/gsutil cp -r gingival gs://lefser/gingival_ra_iter
```

Download the results from Google Drive
```{r}
library(AnVIL)
gsutil_cp("gs://lefser/gingival_ra_iter/gingival_a0.05_w0.05_lda2_LEfSe.res", 
          "~/Projects/lefserBenchmarking/vignettes/gingival/data", 
          recursive = TRUE)
```

## Bootstrap Iterations
Bootstrap iterations from 5 to 100 (increasing by 5)
```{bash iterations}
ath=0.01
wth=0.01
ldath=3

touch gingivalplaque\_a"$ath"\_w"$wth"\_lda"$ldath".log
exec 1> >(tee gingivalplaque\_a"$ath"\_w"$wth"\_lda"$ldath".log)

i=5
while [ $i -le 100 ]
do
    bp=$((i))
    echo "Running iteration $i with bootstrap $bp..."
    /home/linuxbrew/.linuxbrew/bin/run_lefse.py -a "$ath" -w "$wth" -l "$ldath" -b "$bp" gingival.in "gingival_a${ath}_w${wth}_lda${ldath}_bp${bp}.res"
    i=$((i + 5))
done

## Copy the results to Google Cloud bucket
/home/linuxbrew/google-cloud-sdk/bin/gsutil cp -r gingival* gs://lefser/gingival_ra_iter
```

Download the results from Google Drive
```{r}
library(AnVIL)
gsutil_cp("gs://lefser/gingival_ra_iter/*", 
          "~/Projects/lefserBenchmarking/vignettes/gingival/data/LEfSe_Bootstrap_Iterations/", 
          recursive = TRUE)
```




# Mice data
## Data
This is the dataset used in the Figure 3 of the LEfSe paper 
```{bash}
## Make a directory for a given data
mkdir mice_rag2
cd mice_rag2

## Download sample data
curl https://raw.githubusercontent.com/shbrief/lefserBenchmarking/refs/heads/main/vignettes/mice/data/mice_rag2.txt > mice_rag2.txt
```

## Single run
- With the default boostrap iterations (n = 30)
- Using Kruskal Wallis test threshold = 0.01 and LDA cutoff = 2

I reference this answer: https://forum.biobakery.org/t/lefse-galaxy-and-conda-codes/6099 
```{bash}
/home/linuxbrew/.linuxbrew/bin/format_input.py mice_rag2.txt mice_rag2.in -c 1 -s -1 -u -1 -o 1000000
/home/linuxbrew/.linuxbrew/bin/run_lefse.py mice_rag2.in mice_rag2.res -a 0.01 -l 2
/home/linuxbrew/.linuxbrew/bin/plot_res.py mice_rag2.res mice_rag2.res.svg --format svg
/home/linuxbrew/.linuxbrew/bin/plot_cladogram.py mice_rag2.res mice_rag2.svg --format svg

## Copy the results to Google Cloud bucket
/home/linuxbrew/google-cloud-sdk/bin/gsutil cp -r mice_rag2 gs://sh_misc/mice_rag2
```

Download the results from Google Drive
```{r}
library(AnVIL)
gsutil_cp("gs://sh_misc/mice_rag2", 
          "~/Projects/lefserBenchmarking/vignettes/mice/data/", 
          recursive = TRUE)
```

## Bootstrap iteration
```{bash mice_iteration_version_run, echo=FALSE}
## Iteration version
/home/linuxbrew/.linuxbrew/bin/format_input.py mice_rag2.txt mice_rag2.in -c 1 -s -1 -u -1 -o 1000000

i=1
while [ $i -le 10 ]
do
    bp=$(( 20 + ($i * 10 )))
    echo Running iteration $i 
    /home/linuxbrew/.linuxbrew/bin/run_lefse.py -b $bp mice_rag2.in mice_rag2\_bp"$bp".res -a 0.01 -l 2
    i=$(( $i + 1 ))
done

## Copy the results to Google Cloud bucket
/home/linuxbrew/google-cloud-sdk/bin/gsutil cp -r mice_rag2* gs://sh_misc/mice_rag2_iter
```

Download the results from Google Drive
```{r}
library(AnVIL)
gsutil_cp("gs://sh_misc/mice_rag2_iter/*", 
          "~/Projects/lefserBenchmarking/vignettes/mice/data/", 
          recursive = TRUE)
```


# CRC dataset
Zeller14 data from the lefser package

```{bash zeller14_data}
## Make a directory for a given data
mkdir zeller14
cd zeller14

/home/linuxbrew/.linuxbrew/bin/format_input.py zeller14.txt zeller14.in -c 1 -s 2 -u 3 -o 1000000
/home/linuxbrew/.linuxbrew/bin/run_lefse.py zeller14.in zeller14.res
/home/linuxbrew/.linuxbrew/bin/plot_res.py zeller14.res zeller14.res.svg --format svg
/home/linuxbrew/.linuxbrew/bin/plot_cladogram.py zeller14.res zeller14.svg --format svg

## Copy the results to Google Cloud bucket
cd ..
/home/linuxbrew/google-cloud-sdk/bin/gsutil cp -r zeller14* gs://sh_misc/zeller14
```

```{r}
gsutil_cp("gs://sh_misc/zeller14", 
          "~/Projects/lefserBenchmarking/vignettes/zeller14/data", 
          recursive = TRUE)
```



# kostic_crc dataset
This is the dataset provided in the microbiomeMarker package. 
```{bash eval=FALSE}
## Make a directory for a given data
mkdir kostic_crc
cd kostic_crc

## Download sample data
## `kostic_crc.txt` containing the OTU in feature names
curl https://raw.githubusercontent.com/shbrief/lefserBenchmarking/main/data/LEfSe_Inputs/kostic_crc.txt > kostic_crc.txt

## Run LEfSe
/home/linuxbrew/.linuxbrew/bin/format_input.py kostic_crc.txt kostic_crc.in -c 1 -s -1 -u 2 -o 1000000
/home/linuxbrew/.linuxbrew/bin/run_lefse.py kostic_crc.in kostic_crc.res -a 0.02 -l 3
/home/linuxbrew/.linuxbrew/bin/plot_res.py kostic_crc.res kostic_crc.res.svg --format svg
/home/linuxbrew/.linuxbrew/bin/plot_cladogram.py kostic_crc.res kostic_crc.svg --format svg

## Copy the results to Google Cloud bucket
cd ..
/home/linuxbrew/google-cloud-sdk/bin/gsutil cp -r kostic_crc gs://sh_misc
```
